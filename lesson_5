
 1 Пусть в таблице users поля created_at и updated_at оказались незаполненными. Заполните их текущими датой и временем.


mysql> sHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| Projekt_VK_1       |
| information_schema |
| mysql              |
| performance_schema |
| sys                |
| vk                 |
| vk_test            |
+--------------------+
7 rows in set (0,00 sec)

mysql> USE vk;

mysql> DROP TABLE IF EXISTS users;
Query OK, 0 rows affected (0,51 sec)

mysql> CREATE TABLE users (
    -> id SERIAL PRIMARY KEY,
    -> name VARCHAR(255), 
    -> birthday_at DATE,
    -> created_at DATETIME,
    -> updated_at DATETIME
    -> );
Query OK, 0 rows affected (0,88 sec)

mysql> 
mysql> INSERT INTO users (name, birthday_at, created_at, updated_at)
    -> VALUES 
    -> ("Маша", "1990-11-04", NULL, NULL),
    -> ("Саша", "1984-04-05", NULL, NULL),
    -> ("Коля", "1982-03-10", NULL, NULL);
Query OK, 3 rows affected (0,41 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> 
mysql> UPDATE
    -> users
    -> SET
    -> created_at = NOW(),
    -> updated_at = NOW();
Query OK, 3 rows affected (0,17 sec)
Rows matched: 3  Changed: 3  Warnings: 0



 2 Таблица users была неудачно спроектирована. Записи created_at и updated_at были заданы типом VARCHAR и в них долгое время помещались значения в формате 20.10.2017 8:10. Необходимо преобразовать поля к типу DATETIME, сохранив введённые ранее значения.
 mysql> USE vk_2
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql> DROP TABLE IF EXISTS users;
Query OK, 0 rows affected (0,53 sec)

mysql> CREATE TABLE users (
    -> id SERIAL PRIMARY KEY,
    -> name VARCHAR(255), 
    -> birthday_at DATE,
    -> created_at VARCHAR(255),
    -> updated_at  VARCHAR(255)
    -> );
Query OK, 0 rows affected (0,83 sec)

mysql> 
mysql> INSERT INTO users (name, birthday_at, created_at, updated_at)
    -> VALUES 
    -> ("Маша", "1990-11-04",'07.01.2016 12:05', '07.01.2016 12:05'),
    -> ("Саша", "1984-04-05",  '08.02.2016 11:05',  '08.02.2016 11:05'),
    -> ("Коля", "1982-03-10",  '06.03.2016 10:05',  '06.03.2016 10:05');
Query OK, 3 rows affected (0,11 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> 
mysql> UPDATE
    -> users
    -> SET
    -> created_at = STR_TO_DATE(created_at, '%d. %m. %Y %k:%i'),
    -> updated_at = STR_TO_DATE(updated_at, '%d. %m. %Y %k:%i');
Query OK, 3 rows affected (0,10 sec)
Rows matched: 3  Changed: 3  Warnings: 0

mysql> 
mysql> ALTER TABLE 
    -> users
    -> CHANGE
    -> created_at created_at DATETIME DEFAULT CURRENT_TIMESTAMP;
Query OK, 3 rows affected (2,08 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> 
mysql> ALTER TABLE 
    -> users
    -> CHANGE
    -> updated_at updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;
Query OK, 3 rows affected (1,82 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> 
mysql> DESCRIBE users;
+-------------+-----------------+------+-----+-------------------+-----------------------------------------------+
| Field       | Type            | Null | Key | Default           | Extra                                         |
+-------------+-----------------+------+-----+-------------------+-----------------------------------------------+
| id          | bigint unsigned | NO   | PRI | NULL              | auto_increment                                |
| name        | varchar(255)    | YES  |     | NULL              |                                               |
| birthday_at | date            | YES  |     | NULL              |                                               |
| created_at  | datetime        | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED                             |
| updated_at  | datetime        | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED on update CURRENT_TIMESTAMP |
+-------------+-----------------+------+-----+-------------------+-----------------------------------------------+
5 rows in set (0,00 sec)

mysql> 

 3 В таблице складских запасов storehouses_products в поле value могут встречаться самые разные цифры: 0, если товар закончился и выше нуля, если на складе имеются запасы. Необходимо отсортировать записи таким образом, чтобы они выводились в порядке увеличения значения value. Однако нулевые запасы должны выводиться в конце, после всех записей.

mysql>   
mysql>   DROP TABLE IF EXISTS storehouses_products;
Query OK, 0 rows affected (0,37 sec)

mysql> CREATE TABLE storehouses_products (
    -> id SERIAL PRIMARY KEY,
    -> storehouse_id INT UNSIGNED,
    -> product_id INT UNSIGNED,
    -> value INT UNSIGNED,
    -> created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    -> updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP);
Query OK, 0 rows affected (0,69 sec)

mysql> 
mysql> INSERT INTO
    -> storehouses_products (storehouse_id, product_id, value)
    -> VALUES
    -> (1, 333, 0),
    -> (1, 465, 3456),
    -> (1, 234, 10965),
    -> (1, 2988, 45678),
    -> (1, 998, 7654);
Query OK, 5 rows affected (0,19 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> 
mysql> SELECT
    ->   *
    ->  FROM
    ->    storehouses_products 
    -> ORDER BY
    ->   IF(value > 0, 0, 1),
    ->   value;  
+----+---------------+------------+-------+---------------------+---------------------+
| id | storehouse_id | product_id | value | created_at          | updated_at          |
+----+---------------+------------+-------+---------------------+---------------------+
|  2 |             1 |        465 |  3456 | 2021-06-29 22:30:52 | 2021-06-29 22:30:52 |
|  5 |             1 |        998 |  7654 | 2021-06-29 22:30:52 | 2021-06-29 22:30:52 |
|  3 |             1 |        234 | 10965 | 2021-06-29 22:30:52 | 2021-06-29 22:30:52 |
|  4 |             1 |       2988 | 45678 | 2021-06-29 22:30:52 | 2021-06-29 22:30:52 |
|  1 |             1 |        333 |     0 | 2021-06-29 22:30:52 | 2021-06-29 22:30:52 |
+----+---------------+------------+-------+---------------------+---------------------+
5 rows in set (0,00 sec)

mysql> 

 4 Из таблицы users необходимо извлечь пользователей, родившихся в августе и мае. Месяцы заданы в виде списка английских названий (may, august)
 
mysql> Database changed
mysql> SELECT name
    -> FROM users 
    -> WHERE DATE_FORMAT(birthday_at, '%M') IN ('april', 'march');
+----------+
| name     |
+----------+
| Саша     |
| Коля     |
+----------+
2 rows in set (0,00 sec)

mysql> 
5  Из таблицы catalogs извлекаются записи при помощи запроса. SELECT * FROM catalogs WHERE id IN (5, 1, 2); Отсортируйте записи в порядке, заданном в списке IN.


mysql> DROP TABLE IF EXISTS catalogs ;
Query OK, 0 rows affected (0,45 sec)

mysql> CREATE TABLE catalogs (
    -> id SERIAL PRIMARY KEY,
    -> name VARCHAR(255), 
    -> created_at DATETIME,
    -> updated_at DATETIME
    -> );
Query OK, 0 rows affected (1,54 sec)

mysql> 
mysql> INSERT INTO catalogs(id, name)
    -> VALUES 
    -> (NULL,"Материнская плата"),
    -> (NULL,"Процессоры"),
    -> (NULL,"Жёсткие диски"),
    -> (NULL,"Оперативная память"),
    -> (NULL, "Видеокарты");
Query OK, 5 rows affected (0,19 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> 
mysql> SELECT
    -> *
    -> FROM
    ->   catalogs
    -> WHERE
    ->   id IN (5, 1, 2)
    -> ORDER BY
    ->   FIELD(id, 5, 1, 2);
+----+-----------------------------------+------------+------------+
| id | name                              | created_at | updated_at |
+----+-----------------------------------+------------+------------+
|  5 | Видеокарты                        | NULL       | NULL       |
|  1 | Материнская плата                 | NULL       | NULL       |
|  2 | Процессоры                        | NULL       | NULL       |
+----+-----------------------------------+------------+------------+
3 rows in set (0,00 sec)

Практическое задание теме «Агрегация данных»
Подсчитайте средний возраст пользователей в таблице users.


mysql> SELECT
    -> AVG(TIMESTAMPDIFF(YEAR, birthday_at, NOW())) AS age
    -> FROM
    ->   users;
+---------+
| age     |
+---------+
| 35.3333 |
+---------+
1 row in set (0,00 sec)

Подсчитайте количество дней рождения, которые приходятся на каждый из дней недели. Следует учесть, что необходимы дни недели текущего года, а не года рождения.

mysql> 
mysql> USE vk_2
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql> SELECT
    ->   DATE_FORMAT(DATE(CONCAT_WS('-', YEAR(NOW()), MONTH(birthday_at), DAY(birthday_at))), '%W') AS day,
    ->   COUNT(*) AS total
    -> FROM
    ->   users 
    -> GROUP BY
    ->    day
    -> ORDER BY  
    ->    total DESC;
+-----------+-------+
| day       | total |
+-----------+-------+
| Thursday  |     1 |
| Monday    |     1 |
| Wednesday |     1 |
+-----------+-------+
3 rows in set (0,01 sec)

Практическое задание теме «Агрегация данных»
  Подсчитайте произведение чисел в столбце таблицы.
 
mysql> INSERT INTO catalogs(id, name)
    -> VALUES 
    -> (NULL,"Материнская плата"),
    -> (NULL,"Процессоры"),
    -> (NULL,"Жёсткие диски"),
    -> (NULL,"Оперативная память"),
    -> (NULL, "Видеокарты");
Query OK, 5 rows affected (0,15 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> 
mysql> SELECT ROUND(EXP(SUM(LN(id)))) FROM catalogs;
+-------------------------+
| ROUND(EXP(SUM(LN(id)))) |
+-------------------------+
|           1307674368000 |
+-------------------------+
1 row in set (0,00 sec)

mysql> 

